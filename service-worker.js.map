{"version":3,"sources":["webpack:///service-worker.js","webpack:///webpack/bootstrap f662a1a0b93a6fbfb077","webpack:///./app/service-worker.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","sessions","self","addEventListener","event","waitUntil","skipWaiting","clients","claim","data","type","session","ports","postMessage","fetchEvent","url","URL","request","pathname","startsWith","respondWith","fetch","components","split","slice","filename","join","Promise","resolve","reject","channel","MessageChannel","port1","onmessage","Response","port2"],"mappings":"CAAS,SAAUA,GCInB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAE,WACAE,GAAAJ,EACAK,QAAA,EAUA,OANAP,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,QAAA,EAGAF,EAAAD,QAvBA,GAAAD,KAqCA,OATAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAU,EAAA,GAGAV,EAAA,KDMM,SAASI,EAAQD,GAEtB,YEtCD,IAAIQ,KAEJC,MAAKC,iBAAiB,UAAW,SAACC,GAC9BA,EAAMC,UAAUH,KAAKI,iBAGzBJ,KAAKC,iBAAiB,WAAY,SAACC,GAC/BA,EAAMC,UAAUH,KAAKK,QAAQC,WAGjCN,KAAKC,iBAAiB,UAAW,SAACC,GAC9B,OAAQA,EAAMK,KAAKC,MACf,IAAK,eACDT,EAASG,EAAMK,KAAKE,SAAWP,EAAMQ,MAAM,GAC3CR,EAAMQ,MAAM,GAAGC,YAAYT,EAAMK,SAK7CP,KAAKC,iBAAiB,QAAS,SAACW,GAC5B,GAAIC,GAAM,GAAIC,KAAIF,EAAWG,QAAQF,IACrC,KAAKA,EAAIG,SAASC,WAAW,OAEzB,WADAL,GAAWM,YAAYC,MAAMP,EAAWG,SAI5C,IAAIK,GAAaP,EAAIG,SAASK,MAAM,KAAKC,MAAM,GAC3Cb,EAAUW,EAAW,GACrBG,EAAWH,EAAWE,MAAM,GAAGE,KAAK,IAExCZ,GAAWM,YAAY,GAAIO,SAAQ,SAACC,EAASC,GACzC,GAAIC,GAAU,GAAIC,eAClBD,GAAQE,MAAMC,UAAY,SAAC7B,GACvBwB,EAAQ,GAAIM,UAAS9B,EAAMK,QAG/BR,EAASU,GAASE,aAAcH,KAAM,WAAYe,aAAaK,EAAQK","file":"service-worker.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t// ----------------------------------------------------------------------------\n\t// Copyright (c) 2016-2017, QIIME 2 development team.\n\t//\n\t// Distributed under the terms of the Modified BSD License.\n\t//\n\t// The full license is in the file LICENSE, distributed with this software.\n\t// ----------------------------------------------------------------------------\n\t\n\tvar sessions = {};\n\t\n\tself.addEventListener('install', function (event) {\n\t    event.waitUntil(self.skipWaiting()); // Activate worker immediately\n\t});\n\t\n\tself.addEventListener('activate', function (event) {\n\t    event.waitUntil(self.clients.claim()); // Become available to all pages\n\t});\n\t\n\tself.addEventListener('message', function (event) {\n\t    switch (event.data.type) {\n\t        case 'NEW_DOCUMENT':\n\t            sessions[event.data.session] = event.ports[0];\n\t            event.ports[0].postMessage(event.data);\n\t            break;\n\t    }\n\t});\n\t\n\tself.addEventListener('fetch', function (fetchEvent) {\n\t    var url = new URL(fetchEvent.request.url);\n\t    if (!url.pathname.startsWith('/_/')) {\n\t        fetchEvent.respondWith(fetch(fetchEvent.request));\n\t        return; // end of fetch\n\t    }\n\t\n\t    var components = url.pathname.split('/').slice(2); // discard '' and '_'\n\t    var session = components[0];\n\t    var filename = components.slice(2).join('/'); // everything but session/uuid\n\t\n\t    fetchEvent.respondWith(new Promise(function (resolve, reject) {\n\t        var channel = new MessageChannel();\n\t        channel.port1.onmessage = function (event) {\n\t            resolve(new Response(event.data));\n\t        };\n\t\n\t        sessions[session].postMessage({ type: 'GET_BLOB', filename: filename }, [channel.port2]);\n\t    }));\n\t});\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// service-worker.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f662a1a0b93a6fbfb077","// ----------------------------------------------------------------------------\n// Copyright (c) 2016-2017, QIIME 2 development team.\n//\n// Distributed under the terms of the Modified BSD License.\n//\n// The full license is in the file LICENSE, distributed with this software.\n// ----------------------------------------------------------------------------\n\nlet sessions = {};\n\nself.addEventListener('install', (event) => {\n    event.waitUntil(self.skipWaiting()); // Activate worker immediately\n});\n\nself.addEventListener('activate', (event) => {\n    event.waitUntil(self.clients.claim()); // Become available to all pages\n});\n\nself.addEventListener('message', (event) => {\n    switch (event.data.type) {\n        case 'NEW_DOCUMENT':\n            sessions[event.data.session] = event.ports[0];\n            event.ports[0].postMessage(event.data);\n            break\n    }\n})\n\nself.addEventListener('fetch', (fetchEvent) => {\n    let url = new URL(fetchEvent.request.url);\n    if (!url.pathname.startsWith('/_/')) {\n        fetchEvent.respondWith(fetch(fetchEvent.request));\n        return // end of fetch\n    }\n\n    let components = url.pathname.split('/').slice(2);  // discard '' and '_'\n    let session = components[0];\n    let filename = components.slice(2).join('/');  // everything but session/uuid\n\n    fetchEvent.respondWith(new Promise((resolve, reject) => {\n        let channel = new MessageChannel();\n        channel.port1.onmessage = (event) => {\n            resolve(new Response(event.data));\n        }\n\n        sessions[session].postMessage({ type: 'GET_BLOB', filename }, [channel.port2]);\n    }))\n\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./app/service-worker.js"],"sourceRoot":""}